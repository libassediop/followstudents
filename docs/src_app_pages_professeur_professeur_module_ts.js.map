{"version":3,"file":"src_app_pages_professeur_professeur_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA+L;AAChJ;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACE;;AAE1C;AACA,oDAAoD,SAAS;AAC7D,wEAAwE;AACxE,IAAI,uDAAgB;AACpB,EAAE;AACF,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB,YAAY,6DAAsB;AACvD;AACA,wEAAwE;AACxE,IAAI,uDAAgB;AACpB,EAAE;AACF,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB,YAAY,6DAAsB;AACvD;AACA,gCAAgC,SAAS;AACzC,4BAA4B,SAAS;AACrC,8EAA8E;AAC9E,IAAI,gEAAyB;AAC7B,EAAE;AACF,oBAAoB,2DAAoB;AACxC,IAAI,wDAAiB,uFAAuF,6DAAsB;AAClI;AACA,8EAA8E;AAC9E,IAAI,qEAA8B;AAClC,IAAI,oDAAa;AACjB,IAAI,mEAA4B;AAChC,EAAE;AACF,oBAAoB,2DAAoB;AACxC,IAAI,uDAAgB;AACpB,IAAI,+DAAwB;AAC5B;AACA,8EAA8E;AAC9E,IAAI,gEAAyB;AAC7B,EAAE;AACF,oBAAoB,2DAAoB;AACxC,IAAI,wDAAiB,wFAAwF,6DAAsB;AACnI;AACA,8EAA8E;AAC9E,IAAI,qEAA8B;AAClC,IAAI,oDAAa;AACjB,IAAI,mEAA4B;AAChC,EAAE;AACF,oBAAoB,2DAAoB;AACxC,IAAI,uDAAgB;AACpB,IAAI,+DAAwB;AAC5B;AACA,gDAAgD,SAAS;AACzD,4BAA4B,SAAS;AACrC,+DAA+D;AAC/D,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,EAAE;AACF;AACA,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB,YAAY,6DAAsB;AACvD,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,YAAY,6DAAsB;AACvD,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,4CAA4C,+DAAwB,CAAC,sDAAkB;AACxK,+CAA+C,+DAAwB,GAAG,8HAA8H;AACxM;AACA,MAAM,MAAM,sDAAW;AACvB;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,sDAAkB,EAAE,IAAI,UAAU;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,2CAA2C,+DAAwB,CAAC,sDAAkB;AACrK,8CAA8C,+DAAwB,GAAG,2HAA2H;AACpM;AACA,MAAM,MAAM,sDAAW;AACvB;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,sDAAkB,EAAE,IAAI,UAAU;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uDAAY;AACzC;AACA;AACA;AACA;AACA,4BAA4B,uDAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,gCAAgC,+DAAwB,GAAG,0FAA0F;AACrJ,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,MAAM;AACN;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,OAAO,yEAAyE;AAChF,QAAQ,4DAAqB;AAC7B,OAAO,YAAY,0HAA0H,aAAa,gDAAgD;AAC1M;AACA,0BAA0B,MAAM,uDAAY,qCAAqC;AACjF,2BAA2B,MAAM,uDAAY,sCAAsC;AACnF,eAAe,MAAM,gDAAK,EAAE;AAC5B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,yBAAyB,MAAM,gDAAK,EAAE;AACtC,iBAAiB,MAAM,gDAAK,EAAE;AAC9B,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,kBAAkB,MAAM,iDAAM,EAAE;AAChC,iBAAiB,MAAM,iDAAM,EAAE;AAC/B,eAAe,MAAM,sDAAW,qBAAqB;AACrD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB,KAAK,iBAAiB,YAAY,IAAI;AACtC,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,uCAAuC,kDAAkD,kFAAkF,mEAA4B,yDAAyD;AACxT,0CAA0C,+DAAwB,GAAG,uCAAuC,wEAAiC,GAAG;AAChJ,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB,KAAK,iBAAiB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0EAA0E;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,iBAAiB,8BAA8B;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,gDAAgD,2DAA2D,oGAAoG,mEAA4B,2EAA2E;AACvX,mDAAmD,+DAAwB,GAAG,4FAA4F,gEAAyB;AACnM,cAAc,kCAAkC,yDAAU,uCAAuC;AACjG,cAAc,4CAA4C,yDAAU;AACpE,YAAY,wEAAiC,oHAAoH;AACjK,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,OAAO,oBAAoB;AAC3B,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC,yDAAU,uCAAuC;AACzG,sBAAsB,4CAA4C,yDAAU;AAC5E;AACA,aAAa;AACb,KAAK,iBAAiB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,wBAAwB;AACpG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,sBAA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,iBAAiB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,2CAA2C,+DAAwB;AAClJ,8CAA8C,+DAAwB,GAAG,uFAAuF,wBAAwB;AACxL;AACA,MAAM,2CAA2C,MAAM,+CAAI,EAAE;AAC7D;AACA;AACA,iBAAiB,MAAM,iDAAM,EAAE;AAC/B;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU;AAChC,sBAAsB,+CAAI;AAC1B,aAAa,GAAG,IAAI,IAAI;AACxB,kBAAkB,iDAAM;AACxB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA,2BAA2B,uCAAuC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAY;AAC3C;AACA;AACA;AACA,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,oCAAoC,+DAAwB,mBAAmB,+DAAwB;AACxK,uCAAuC,+DAAwB,GAAG,+HAA+H;AACjM,QAAQ,wDAAiB,kEAAkE,uBAAuB;AAClH,OAAO,YAAY,0CAA0C,aAAa,kFAAkF;AAC5J;AACA,MAAM,uBAAuB;AAC7B,MAAM,iCAAiC,MAAM,mDAAQ,EAAE;AACvD;AACA;AACA,oBAAoB,MAAM,iDAAM,EAAE;AAClC,qBAAqB,MAAM,iDAAM,EAAE;AACnC,mBAAmB,MAAM,gDAAK,yBAAyB;AACvD,iBAAiB,MAAM,iDAAM,EAAE;AAC/B,gBAAgB,MAAM,uDAAY,oBAAoB;AACtD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,uBAAuB,IAAI;AAC3D,sBAAsB,mDAAQ;AAC9B,aAAa,GAAG,IAAI,IAAI;AACxB,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAY;AAC3C;AACA;AACA;AACA,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,oCAAoC,+DAAwB;AAC7H,uCAAuC,+DAAwB,GAAG,+HAA+H;AACjM,QAAQ,wDAAiB,kEAAkE,uBAAuB;AAClH,OAAO,aAAa,kFAAkF;AACtG;AACA,MAAM;AACN;AACA;AACA,oBAAoB,MAAM,iDAAM,EAAE;AAClC,qBAAqB,MAAM,iDAAM,EAAE;AACnC,iBAAiB,MAAM,iDAAM,EAAE;AAC/B,gBAAgB,MAAM,uDAAY,oBAAoB;AACtD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,uBAAuB,IAAI,IAAI;AAC/D,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,wCAAwC,+DAAwB;AACzI,2CAA2C,+DAAwB,GAAG,gFAAgF,4CAA4C;AAClM;AACA,MAAM,iCAAiC,MAAM,+CAAI,EAAE;AACnD;AACA;AACA,iBAAiB,MAAM,gDAAK,6BAA6B;AACzD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU;AAChC,sBAAsB,+CAAI;AAC1B,aAAa,GAAG,IAAI,IAAI;AACxB,kBAAkB,gDAAK;AACvB;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAY;AAC3C;AACA;AACA;AACA,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,wCAAwC,+DAAwB;AACzI,2CAA2C,+DAAwB,GAAG,2IAA2I;AACjN,QAAQ,wDAAiB,sEAAsE,uBAAuB;AACtH,OAAO,aAAa,kFAAkF;AACtG;AACA,MAAM;AACN;AACA;AACA,oBAAoB,MAAM,iDAAM,EAAE;AAClC,qBAAqB,MAAM,iDAAM,EAAE;AACnC,iBAAiB,MAAM,iDAAM,EAAE;AAC/B,gBAAgB,MAAM,uDAAY,oBAAoB;AACtD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,uBAAuB,IAAI,IAAI;AAC/D,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,uCAAuC,+DAAwB;AACtI,0CAA0C,+DAAwB,GAAG,wIAAwI;AAC7M,QAAQ,wDAAiB,qEAAqE,uBAAuB;AACrH,OAAO,aAAa,wBAAwB;AAC5C;AACA,MAAM;AACN;AACA;AACA,iBAAiB,MAAM,iDAAM,EAAE;AAC/B,gBAAgB,MAAM,uDAAY,oBAAoB;AACtD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,uBAAuB,IAAI,IAAI;AAC/D,kBAAkB,iDAAM;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,wCAAwC,+DAAwB;AACzI,2CAA2C,+DAAwB,GAAG,sEAAsE;AAC5I;AACA,MAAM,iCAAiC,MAAM,+CAAI,EAAE;AACnD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU;AAChC,sBAAsB,+CAAI;AAC1B,aAAa,GAAG,IAAI,UAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAwD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,aAAa;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,iBAAiB,8BAA8B;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,gDAAgD,2DAA2D,oGAAoG,mEAA4B,2EAA2E;AACvX,mDAAmD,+DAAwB,GAAG,iGAAiG,gEAAyB;AACxM,cAAc,kCAAkC,yDAAU,uCAAuC;AACjG,cAAc,4CAA4C,yDAAU;AACpE,YAAY,wEAAiC,GAAG;AAChD,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,sBAAsB,kCAAkC,yDAAU,uCAAuC;AACzG,sBAAsB,4CAA4C,yDAAU;AAC5E;AACA,aAAa;AACb,KAAK,iBAAiB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,6CAA6C;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB,8BAA8B;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,sCAAsC,iDAAiD,gFAAgF,mEAA4B,uDAAuD;AACjT,yCAAyC,+DAAwB,GAAG,6EAA6E,gEAAyB;AAC1K,cAAc,kCAAkC,yDAAU;AAC1D,YAAY,wEAAiC,GAAG;AAChD,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,sBAAsB,kCAAkC,yDAAU;AAClE;AACA,aAAa;AACb,KAAK,iBAAiB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,0CAA0C,+DAAwB;AAC/I,6CAA6C,+DAAwB,GAAG,oFAAoF,gHAAgH,aAAa,kEAA2B,GAAG;AACvT;AACA,MAAM;AACN;AACA;AACA,yBAAyB,MAAM,gDAAK,EAAE;AACtC,yBAAyB,MAAM,gDAAK,EAAE;AACtC,wBAAwB,MAAM,gDAAK,EAAE;AACrC;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,uBAAuB,IAAI,IAAI;AAC/D,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,yCAAyC,+DAAwB;AAC5I,4CAA4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","sources":["./node_modules/angular-archwizard/__ivy_ngcc__/fesm2015/angular-archwizard.js","./src/app/pages/professeur/classe-enseigner/classe-enseigner.component.ts","./src/app/pages/professeur/classe-enseigner/classe-enseigner.component.html","./src/app/pages/professeur/professeur-routing.module.ts","./src/app/pages/professeur/professeur.module.ts","./src/app/pages/professeur/professeur/professeur.component.ts","./src/app/pages/professeur/professeur/professeur.component.html"],"sourcesContent":["import { Directive, TemplateRef, EventEmitter, ContentChild, Input, Output, HostBinding, Component, forwardRef, ContentChildren, Host, Optional, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"*\"];\nconst _c1 = function (a0, a1, a2, a3, a4, a5, a6) { return { \"vertical\": a0, \"horizontal\": a1, \"small\": a2, \"large-filled\": a3, \"large-filled-symbols\": a4, \"large-empty\": a5, \"large-empty-symbols\": a6 }; };\nfunction WizardComponent_aw_wizard_navigation_bar_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction7(1, _c1, ctx_r0.navBarLocation == \"left\", ctx_r0.navBarLocation == \"top\", ctx_r0.navBarLayout == \"small\", ctx_r0.navBarLayout == \"large-filled\", ctx_r0.navBarLayout == \"large-filled-symbols\", ctx_r0.navBarLayout == \"large-empty\", ctx_r0.navBarLayout == \"large-empty-symbols\"));\n} }\nfunction WizardComponent_aw_wizard_navigation_bar_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction7(1, _c1, ctx_r1.navBarLocation == \"right\", ctx_r1.navBarLocation == \"bottom\", ctx_r1.navBarLayout == \"small\", ctx_r1.navBarLayout == \"large-filled\", ctx_r1.navBarLayout == \"large-filled-symbols\", ctx_r1.navBarLayout == \"large-empty\", ctx_r1.navBarLayout == \"large-empty-symbols\"));\n} }\nconst _c2 = function (a1, a2) { return { \"wizard-steps\": true, \"vertical\": a1, \"horizontal\": a2 }; };\nconst _c3 = function (a0) { return { wizardStep: a0 }; };\nfunction WizardNavigationBarComponent_li_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepTitleTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n} }\nfunction WizardNavigationBarComponent_li_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.stepTitle);\n} }\nfunction WizardNavigationBarComponent_li_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepSymbolTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n} }\nfunction WizardNavigationBarComponent_li_1_ng_container_7_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.navigationSymbol.symbol);\n} }\nconst _c4 = function (a0, a1, a2, a3, a4, a5) { return { \"current\": a0, \"editing\": a1, \"done\": a2, \"optional\": a3, \"completed\": a4, \"navigable\": a5 }; };\nconst _c5 = function (a0) { return { \"font-family\": a0 }; };\nfunction WizardNavigationBarComponent_li_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 2);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(3, WizardNavigationBarComponent_li_1_ng_container_3_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(4, WizardNavigationBarComponent_li_1_ng_container_4_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 6);\n    ɵngcc0.ɵɵtemplate(6, WizardNavigationBarComponent_li_1_ng_container_6_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(7, WizardNavigationBarComponent_li_1_ng_container_7_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const step_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction6(8, _c4, ctx_r0.isCurrent(step_r1), ctx_r0.isEditing(step_r1), ctx_r0.isDone(step_r1), ctx_r0.isOptional(step_r1), ctx_r0.isCompleted(step_r1), ctx_r0.isNavigable(step_r1)));\n    ɵngcc0.ɵɵattribute(\"id\", step_r1.stepId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"awGoToStep\", step_r1);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(15, _c5, step_r1.stepSymbolTemplate ? \"\" : step_r1.navigationSymbol.fontFamily));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepSymbolTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepSymbolTemplate);\n} }\nclass WizardStepSymbolDirective {\n    /**\n     * Constructor\n     *\n     * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nWizardStepSymbolDirective.ɵfac = function WizardStepSymbolDirective_Factory(t) { return new (t || WizardStepSymbolDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nWizardStepSymbolDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStepSymbolDirective, selectors: [[\"ng-template\", \"awStepSymbol\", \"\"], [\"ng-template\", \"awWizardStepSymbol\", \"\"]] });\nWizardStepSymbolDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepSymbolDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepTitleDirective {\n    /**\n     * Constructor\n     *\n     * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nWizardStepTitleDirective.ɵfac = function WizardStepTitleDirective_Factory(t) { return new (t || WizardStepTitleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nWizardStepTitleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStepTitleDirective, selectors: [[\"ng-template\", \"awStepTitle\", \"\"], [\"ng-template\", \"awWizardStepTitle\", \"\"]] });\nWizardStepTitleDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepTitleDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardStep {\n    constructor() {\n        /**\n         * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n         * Takes effect when `stepSymbolTemplate` is not defined or null.\n         */\n        this.navigationSymbol = { symbol: '' };\n        /**\n         * A boolean describing if the wizard step is currently selected\n         */\n        this.selected = false;\n        /**\n         * A boolean describing if the wizard step has been completed\n         */\n        this.completed = false;\n        /**\n         * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n         *\n         * Users will typically use `CompletedStepDirective` to set this flag\n         */\n        this.initiallyCompleted = false;\n        /**\n         * A boolean describing if the wizard step is being edited after being competed\n         *\n         * This flag can only be true when `selected` is true.\n         */\n        this.editing = false;\n        /**\n         * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n         */\n        this.defaultSelected = false;\n        /**\n         * A boolean describing if the wizard step is an optional step\n         */\n        this.optional = false;\n        /**\n         * A function or boolean deciding, if this step can be entered\n         */\n        this.canEnter = true;\n        /**\n         * A function or boolean deciding, if this step can be exited\n         */\n        this.canExit = true;\n        /**\n         * This [[EventEmitter]] is called when the step is entered.\n         * The bound method should be used to do initialization work.\n         */\n        this.stepEnter = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called when the step is exited.\n         * The bound method can be used to do cleanup work.\n         */\n        this.stepExit = new EventEmitter();\n    }\n    /**\n     * Returns true if this wizard step should be visible to the user.\n     * If the step should be visible to the user false is returned, otherwise true\n     */\n    get hidden() {\n        return !this.selected;\n    }\n    /**\n     * This method returns true, if this wizard step can be transitioned with a given direction.\n     * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n     *\n     * @param condition A condition variable, deciding if the step can be transitioned\n     * @param direction The direction in which this step should be transitioned\n     * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n     * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n     */\n    static canTransitionStep(condition, direction) {\n        if (typeof (condition) === typeof (true)) {\n            return Promise.resolve(condition);\n        }\n        else if (condition instanceof Function) {\n            return Promise.resolve(condition(direction));\n        }\n        else {\n            return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n        }\n    }\n    /**\n     * A function called when the step is entered\n     *\n     * @param direction The direction in which the step is entered\n     */\n    enter(direction) {\n        this.stepEnter.emit(direction);\n    }\n    /**\n     * A function called when the step is exited\n     *\n     * @param direction The direction in which the step is exited\n     */\n    exit(direction) {\n        this.stepExit.emit(direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be entered from the given direction.\n     * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be entered\n     * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n     * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n     */\n    canEnterStep(direction) {\n        return WizardStep.canTransitionStep(this.canEnter, direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be exited into given direction.\n     * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be left\n     * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n     * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n     */\n    canExitStep(direction) {\n        return WizardStep.canTransitionStep(this.canExit, direction);\n    }\n}\nWizardStep.ɵfac = function WizardStep_Factory(t) { return new (t || WizardStep)(); };\nWizardStep.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStep, contentQueries: function WizardStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepTitleDirective, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepSymbolDirective, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepTitleTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepSymbolTemplate = _t.first);\n    } }, hostVars: 1, hostBindings: function WizardStep_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"hidden\", ctx.hidden);\n    } }, inputs: { navigationSymbol: \"navigationSymbol\", canEnter: \"canEnter\", canExit: \"canExit\", stepId: \"stepId\", stepTitle: \"stepTitle\" }, outputs: { stepEnter: \"stepEnter\", stepExit: \"stepExit\" } });\nWizardStep.propDecorators = {\n    stepTitleTemplate: [{ type: ContentChild, args: [WizardStepTitleDirective,] }],\n    stepSymbolTemplate: [{ type: ContentChild, args: [WizardStepSymbolDirective,] }],\n    stepId: [{ type: Input }],\n    stepTitle: [{ type: Input }],\n    navigationSymbol: [{ type: Input }],\n    canEnter: [{ type: Input }],\n    canExit: [{ type: Input }],\n    stepEnter: [{ type: Output }],\n    stepExit: [{ type: Output }],\n    hidden: [{ type: HostBinding, args: ['hidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStep, [{\n        type: Directive\n    }], function () { return []; }, { navigationSymbol: [{\n            type: Input\n        }], canEnter: [{\n            type: Input\n        }], canExit: [{\n            type: Input\n        }], stepEnter: [{\n            type: Output\n        }], stepExit: [{\n            type: Output\n        }], hidden: [{\n            type: HostBinding,\n            args: ['hidden']\n        }], stepTitleTemplate: [{\n            type: ContentChild,\n            args: [WizardStepTitleDirective]\n        }], stepSymbolTemplate: [{\n            type: ContentChild,\n            args: [WizardStepSymbolDirective]\n        }], stepId: [{\n            type: Input\n        }], stepTitle: [{\n            type: Input\n        }] }); })();\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardCompletionStep extends WizardStep {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.stepExit = new EventEmitter();\n        /**\n         * @inheritDoc\n         */\n        this.canExit = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    enter(direction) {\n        this.completed = true;\n        this.stepEnter.emit(direction);\n    }\n    /**\n     * @inheritDoc\n     */\n    exit(direction) {\n        // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n        this.completed = this.initiallyCompleted;\n        this.stepExit.emit(direction);\n    }\n}\nWizardCompletionStep.ɵfac = /*@__PURE__*/ function () { let ɵWizardCompletionStep_BaseFactory; return function WizardCompletionStep_Factory(t) { return (ɵWizardCompletionStep_BaseFactory || (ɵWizardCompletionStep_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStep)))(t || WizardCompletionStep); }; }();\nWizardCompletionStep.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardCompletionStep, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStep, [{\n        type: Directive\n    }], null, null); })();\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepComponent extends WizardCompletionStep {\n}\nWizardCompletionStepComponent.ɵfac = /*@__PURE__*/ function () { let ɵWizardCompletionStepComponent_BaseFactory; return function WizardCompletionStepComponent_Factory(t) { return (ɵWizardCompletionStepComponent_BaseFactory || (ɵWizardCompletionStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepComponent)))(t || WizardCompletionStepComponent); }; }();\nWizardCompletionStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardCompletionStepComponent, selectors: [[\"aw-wizard-completion-step\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent) },\n            { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function WizardCompletionStepComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard-completion-step',\n                template: \"<ng-content></ng-content>\\n\",\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent) },\n                    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nvar MovingDirection;\n(function (MovingDirection) {\n    /**\n     * A forward step transition\n     */\n    MovingDirection[MovingDirection[\"Forwards\"] = 0] = \"Forwards\";\n    /**\n     * A backward step transition\n     */\n    MovingDirection[MovingDirection[\"Backwards\"] = 1] = \"Backwards\";\n    /**\n     * No step transition was done\n     */\n    MovingDirection[MovingDirection[\"Stay\"] = 2] = \"Stay\";\n})(MovingDirection || (MovingDirection = {}));\n\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\nclass BaseNavigationMode {\n    /**\n     * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n     *\n     * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n     * Navigation by navigation bar is governed by [[isNavigable]].\n     *\n     * In this implementation, a destination wizard step can be entered if:\n     * - it exists\n     * - the current step can be exited in the direction of the destination step\n     * - the destination step can be entered in the direction from the current step\n     *\n     * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination step\n     * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n     */\n    canGoToStep(wizard, destinationIndex) {\n        const hasStep = wizard.hasStep(destinationIndex);\n        const movingDirection = wizard.getMovingDirection(destinationIndex);\n        const canExitCurrentStep = (previous) => {\n            return previous && wizard.currentStep.canExitStep(movingDirection);\n        };\n        const canEnterDestinationStep = (previous) => {\n            return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n        };\n        const canTransitionToStep = (previous) => {\n            return previous && this.canTransitionToStep(wizard, destinationIndex);\n        };\n        return Promise.resolve(hasStep)\n            .then(canTransitionToStep)\n            // Apply user-defined checks at the end.  They can involve user interaction\n            // which is better to be avoided if navigation mode does not actually allow the transition\n            // (`canTransitionToStep` returns `false`).\n            .then(canExitCurrentStep)\n            .then(canEnterDestinationStep);\n    }\n    /**\n     * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n     *\n     * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n     * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n     * by previous/next buttons, but not using the navigation bar.\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination step\n     * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n     */\n    canTransitionToStep(wizard, destinationIndex) {\n        return this.isNavigable(wizard, destinationIndex);\n    }\n    /**\n     * Tries to transition to the wizard step, as denoted by the given destination index.\n     *\n     * When entering the destination step, the following actions are done:\n     * - the old current step is set as completed\n     * - the old current step is set as unselected\n     * - the old current step is exited\n     * - the destination step is set as selected\n     * - the destination step is entered\n     *\n     * When the destination step couldn't be entered, the following actions are done:\n     * - the current step is exited and entered in the direction `MovingDirection.Stay`\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination wizard step, which should be entered\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToStep(wizard, destinationIndex, preFinalize, postFinalize) {\n        this.canGoToStep(wizard, destinationIndex).then(navigationAllowed => {\n            if (navigationAllowed) {\n                // the current step can be exited in the given direction\n                const movingDirection = wizard.getMovingDirection(destinationIndex);\n                /* istanbul ignore if */\n                if (preFinalize) {\n                    preFinalize.emit();\n                }\n                // leave current step\n                wizard.currentStep.completed = true;\n                wizard.currentStep.exit(movingDirection);\n                wizard.currentStep.editing = false;\n                wizard.currentStep.selected = false;\n                this.transition(wizard, destinationIndex);\n                // remember if the next step is already completed before entering it to properly set `editing` flag\n                const wasCompleted = wizard.completed || wizard.currentStep.completed;\n                // go to next step\n                wizard.currentStep.enter(movingDirection);\n                wizard.currentStep.selected = true;\n                if (wasCompleted) {\n                    wizard.currentStep.editing = true;\n                }\n                /* istanbul ignore if */\n                if (postFinalize) {\n                    postFinalize.emit();\n                }\n            }\n            else {\n                // if the current step can't be left, reenter the current step\n                wizard.currentStep.exit(MovingDirection.Stay);\n                wizard.currentStep.enter(MovingDirection.Stay);\n            }\n        });\n    }\n    /**\n     * Transitions the wizard to the given step index.\n     *\n     * Can perform additional actions in particular navigation mode implementations.\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination wizard step\n     */\n    transition(wizard, destinationIndex) {\n        wizard.currentStepIndex = destinationIndex;\n    }\n    /**\n     * Resets the state of this wizard.\n     *\n     * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n     * In addition the whole wizard is set as incomplete.\n     *\n     * @param wizard The wizard component to operate on\n     */\n    reset(wizard) {\n        this.ensureCanReset(wizard);\n        // reset the step internal state\n        wizard.wizardSteps.forEach(step => {\n            step.completed = step.initiallyCompleted;\n            step.selected = false;\n            step.editing = false;\n        });\n        // set the first step as the current step\n        wizard.currentStepIndex = wizard.defaultStepIndex;\n        wizard.currentStep.selected = true;\n        wizard.currentStep.enter(MovingDirection.Forwards);\n    }\n    /**\n     * Checks if wizard configuration allows to perform reset.\n     *\n     * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n     *\n     * Can include additional checks in particular navigation mode implementations.\n     *\n     * @param wizard The wizard component to operate on\n     * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n     */\n    ensureCanReset(wizard) {\n        // the wizard doesn't contain a step with the default step index\n        if (!wizard.hasStep(wizard.defaultStepIndex)) {\n            throw new Error(`The wizard doesn't contain a step with index ${wizard.defaultStepIndex}`);\n        }\n    }\n}\n\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\nclass ConfigurableNavigationMode extends BaseNavigationMode {\n    /**\n     * Constructor\n     *\n     * @param navigateBackward Controls whether wizard steps before the current step are navigable\n     * @param navigateForward Controls whether wizard steps before the current step are navigable\n     */\n    constructor(navigateBackward = null, navigateForward = null) {\n        super();\n        this.navigateBackward = navigateBackward;\n        this.navigateForward = navigateForward;\n        this.navigateBackward = this.navigateBackward || 'allow';\n        this.navigateForward = this.navigateForward || 'deny';\n    }\n    /**\n     * @inheritDoc\n     */\n    canTransitionToStep(wizard, destinationIndex) {\n        // if the destination step can be navigated to using the navigation bar,\n        // it should be accessible with [goToStep] as well\n        if (this.isNavigable(wizard, destinationIndex)) {\n            return true;\n        }\n        // navigation with [goToStep] is permitted if all previous steps\n        // to the destination step have been completed or are optional\n        return wizard.wizardSteps\n            .filter((step, index) => index < destinationIndex && index !== wizard.currentStepIndex)\n            .every(step => step.completed || step.optional);\n    }\n    /**\n     * @inheritDoc\n     */\n    transition(wizard, destinationIndex) {\n        if (this.navigateForward === 'deny') {\n            // set all steps after the destination step to incomplete\n            wizard.wizardSteps\n                .filter((step, index) => wizard.currentStepIndex > destinationIndex && index > destinationIndex)\n                .forEach(step => step.completed = false);\n        }\n        super.transition(wizard, destinationIndex);\n    }\n    /**\n     * @inheritDoc\n     */\n    isNavigable(wizard, destinationIndex) {\n        // Check if the destination step can be navigated to\n        const destinationStep = wizard.getStepAtIndex(destinationIndex);\n        if (destinationStep instanceof WizardCompletionStep) {\n            // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n            const previousStepsCompleted = wizard.wizardSteps\n                .filter((step, index) => index < destinationIndex)\n                .every(step => step.completed || step.optional || step.selected);\n            if (!previousStepsCompleted) {\n                return false;\n            }\n        }\n        // Apply navigation pocicies\n        if (destinationIndex < wizard.currentStepIndex) {\n            // If the destination step is before current, apply the `navigateBackward` policy\n            switch (this.navigateBackward) {\n                case 'allow': return true;\n                case 'deny': return false;\n                default:\n                    throw new Error(`Invalid value for navigateBackward: ${this.navigateBackward}`);\n            }\n        }\n        else if (destinationIndex > wizard.currentStepIndex) {\n            // If the destination step is after current, apply the `navigateForward` policy\n            switch (this.navigateForward) {\n                case 'allow': return true;\n                case 'deny': return false;\n                case 'visited': return destinationStep.completed;\n                default:\n                    throw new Error(`Invalid value for navigateForward: ${this.navigateForward}`);\n            }\n        }\n        else {\n            // Re-entering the current step is not allowed\n            return false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    ensureCanReset(wizard) {\n        super.ensureCanReset(wizard);\n        // the default step is a completion step and the wizard contains more than one step\n        const defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n        const defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n        if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n            throw new Error(`The default step index ${wizard.defaultStepIndex} references a completion step`);\n        }\n    }\n}\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardComponent {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * The location of the navigation bar inside the wizard.\n         * This location can be either top, bottom, left or right\n         */\n        this.navBarLocation = 'top';\n        /**\n         * The layout of the navigation bar inside the wizard.\n         * The layout can be either small, large-filled, large-empty or large-symbols\n         */\n        this.navBarLayout = 'small';\n        /**\n         * The direction in which the steps inside the navigation bar should be shown.\n         * The direction can be either `left-to-right` or `right-to-left`\n         */\n        this.navBarDirection = 'left-to-right';\n        this._defaultStepIndex = 0;\n        /**\n         * True, if the navigation bar shouldn't be used for navigating\n         */\n        this.disableNavigationBar = false;\n        /**\n         * The navigation mode used to navigate inside the wizard\n         *\n         * For outside access, use the [[navigation]] getter.\n         */\n        this._navigation = new ConfigurableNavigationMode();\n        /**\n         * An array representation of all wizard steps belonging to this model\n         *\n         * For outside access, use the [[wizardSteps]] getter.\n         */\n        this._wizardSteps = [];\n        /**\n         * The index of the currently visible and selected step inside the wizardSteps QueryList.\n         * If this wizard contains no steps, currentStepIndex is -1\n         *\n         * Note: Do not modify this field directly.  Instead, use navigation methods:\n         * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n         */\n        this.currentStepIndex = -1;\n    }\n    /**\n     * The initially selected step, represented by its index\n     * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n     */\n    get defaultStepIndex() {\n        // This value can be either:\n        // - the index of a wizard step with a `selected` directive, or\n        // - the default step index, set in the [[WizardComponent]]\n        const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n        if (foundDefaultStep) {\n            return this.getIndexOfStep(foundDefaultStep);\n        }\n        else {\n            return this._defaultStepIndex;\n        }\n    }\n    set defaultStepIndex(defaultStepIndex) {\n        this._defaultStepIndex = defaultStepIndex;\n    }\n    /**\n     * Returns true if this wizard uses a horizontal orientation.\n     * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n     *\n     * @returns True if this wizard uses a horizontal orientation\n     */\n    get horizontalOrientation() {\n        return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n    }\n    /**\n     * Returns true if this wizard uses a vertical orientation.\n     * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n     *\n     * @returns True if this wizard uses a vertical orientation\n     */\n    get verticalOrientation() {\n        return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n    }\n    /**\n     * Initialization work\n     */\n    ngAfterContentInit() {\n        // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n        this.wizardStepsQueryList.changes.subscribe(changedWizardSteps => {\n            this.updateWizardSteps(changedWizardSteps.toArray());\n        });\n        // initialize the model\n        this.updateWizardSteps(this.wizardStepsQueryList.toArray());\n        // finally reset the whole wizard component\n        setTimeout(() => this.reset());\n    }\n    /**\n     * The WizardStep object belonging to the currently visible and selected step.\n     * The currentStep is always the currently selected wizard step.\n     * The currentStep can be either completed, if it was visited earlier,\n     * or not completed, if it is visited for the first time or its state is currently out of date.\n     *\n     * If this wizard contains no steps, currentStep is null\n     */\n    get currentStep() {\n        if (this.hasStep(this.currentStepIndex)) {\n            return this.wizardSteps[this.currentStepIndex];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * The completeness of the wizard.\n     * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n     */\n    get completed() {\n        return this.wizardSteps.every(step => step.completed || step.optional);\n    }\n    /**\n     * An array representation of all wizard steps belonging to this model\n     */\n    get wizardSteps() {\n        return this._wizardSteps;\n    }\n    /**\n     * Updates the wizard steps to the new array\n     *\n     * @param wizardSteps The updated wizard steps\n     */\n    updateWizardSteps(wizardSteps) {\n        // the wizard is currently not in the initialization phase\n        if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n            this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n        }\n        this._wizardSteps = wizardSteps;\n    }\n    /**\n     * The navigation mode used to navigate inside the wizard\n     */\n    get navigation() {\n        return this._navigation;\n    }\n    /**\n     * Updates the navigation mode for this wizard component\n     *\n     * @param navigation The updated navigation mode\n     */\n    set navigation(navigation) {\n        this._navigation = navigation;\n    }\n    /**\n     * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n     *\n     * @param stepIndex The to be checked index of a step inside this wizard\n     * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n     */\n    hasStep(stepIndex) {\n        return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n    }\n    /**\n     * Checks if this wizard has a previous step, compared to the current step\n     *\n     * @returns True if this wizard has a previous step before the current step\n     */\n    hasPreviousStep() {\n        return this.hasStep(this.currentStepIndex - 1);\n    }\n    /**\n     * Checks if this wizard has a next step, compared to the current step\n     *\n     * @returns True if this wizard has a next step after the current step\n     */\n    hasNextStep() {\n        return this.hasStep(this.currentStepIndex + 1);\n    }\n    /**\n     * Checks if this wizard is currently inside its last step\n     *\n     * @returns True if the wizard is currently inside its last step\n     */\n    isLastStep() {\n        return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n    }\n    /**\n     * Finds the [[WizardStep]] at the given index `stepIndex`.\n     * If no [[WizardStep]] exists at the given index an Error is thrown\n     *\n     * @param stepIndex The given index\n     * @returns The found [[WizardStep]] at the given index `stepIndex`\n     * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n     */\n    getStepAtIndex(stepIndex) {\n        if (!this.hasStep(stepIndex)) {\n            throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n        }\n        return this.wizardSteps[stepIndex];\n    }\n    /**\n     * Finds the index of the step with the given `stepId`.\n     * If no step with the given `stepId` exists, `-1` is returned\n     *\n     * @param stepId The given step id\n     * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n     */\n    getIndexOfStepWithId(stepId) {\n        return this.wizardSteps.findIndex(step => step.stepId === stepId);\n    }\n    /**\n     * Finds the index of the given [[WizardStep]] `step`.\n     * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n     *\n     * @param step The given [[WizardStep]]\n     * @returns The found index of `step` or `-1` if the step is not included in the wizard\n     */\n    getIndexOfStep(step) {\n        return this.wizardSteps.indexOf(step);\n    }\n    /**\n     * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n     *\n     * @param destinationStep The given destination step\n     * @returns The calculated [[MovingDirection]]\n     */\n    getMovingDirection(destinationStep) {\n        let movingDirection;\n        if (destinationStep > this.currentStepIndex) {\n            movingDirection = MovingDirection.Forwards;\n        }\n        else if (destinationStep < this.currentStepIndex) {\n            movingDirection = MovingDirection.Backwards;\n        }\n        else {\n            movingDirection = MovingDirection.Stay;\n        }\n        return movingDirection;\n    }\n    /**\n     * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n     *\n     * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n     * Navigation by navigation bar is governed by [[isNavigable]].\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n     */\n    canGoToStep(destinationIndex) {\n        return this.navigation.canGoToStep(this, destinationIndex);\n    }\n    /**\n     * Tries to transition to the wizard step, as denoted by the given destination index.\n     *\n     * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n     * The [[canGoToStep]] method will be called automatically.\n     *\n     * @param destinationIndex The index of the destination wizard step, which should be entered\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToStep(destinationIndex, preFinalize, postFinalize) {\n        return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n    }\n    /**\n     * Tries to transition the wizard to the previous step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToPreviousStep(preFinalize, postFinalize) {\n        return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n    /**\n     * Tries to transition the wizard to the next step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToNextStep(preFinalize, postFinalize) {\n        return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n    /**\n     * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns True if the step can be navigated to, false otherwise\n     */\n    isNavigable(destinationIndex) {\n        return this.navigation.isNavigable(this, destinationIndex);\n    }\n    /**\n     * Resets the state of this wizard.\n     */\n    reset() {\n        this.navigation.reset(this);\n    }\n}\nWizardComponent.ɵfac = function WizardComponent_Factory(t) { return new (t || WizardComponent)(); };\nWizardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardComponent, selectors: [[\"aw-wizard\"]], contentQueries: function WizardComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStep, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wizardStepsQueryList = _t);\n    } }, hostVars: 4, hostBindings: function WizardComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"horizontal\", ctx.horizontalOrientation)(\"vertical\", ctx.verticalOrientation);\n    } }, inputs: { navBarLocation: \"navBarLocation\", navBarLayout: \"navBarLayout\", navBarDirection: \"navBarDirection\", disableNavigationBar: \"disableNavigationBar\", defaultStepIndex: \"defaultStepIndex\" }, ngContentSelectors: _c0, decls: 4, vars: 6, consts: [[3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"]], template: function WizardComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, WizardComponent_aw_wizard_navigation_bar_0_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, WizardComponent_aw_wizard_navigation_bar_3_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"left\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx.navBarLocation == \"left\" || ctx.navBarLocation == \"right\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"bottom\"));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"bottom\" || ctx.navBarLocation == \"right\");\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgClass, WizardNavigationBarComponent]; }, encapsulation: 2 });\nWizardComponent.ctorParameters = () => [];\nWizardComponent.propDecorators = {\n    wizardStepsQueryList: [{ type: ContentChildren, args: [WizardStep, { descendants: true },] }],\n    navBarLocation: [{ type: Input }],\n    navBarLayout: [{ type: Input }],\n    navBarDirection: [{ type: Input }],\n    defaultStepIndex: [{ type: Input }],\n    disableNavigationBar: [{ type: Input }],\n    horizontalOrientation: [{ type: HostBinding, args: ['class.horizontal',] }],\n    verticalOrientation: [{ type: HostBinding, args: ['class.vertical',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard',\n                template: \"<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation == 'top' || navBarLocation == 'left'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'left',\\n    'horizontal': navBarLocation == 'top',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\\n<div [ngClass]=\\\"{\\n  'wizard-steps': true,\\n  'vertical': navBarLocation == 'left' || navBarLocation == 'right',\\n  'horizontal': navBarLocation == 'top' || navBarLocation == 'bottom'\\n}\\\">\\n  <ng-content></ng-content>\\n</div>\\n\\n<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation == 'bottom' || navBarLocation == 'right'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'right',\\n    'horizontal': navBarLocation == 'bottom',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\"\n            }]\n    }], function () { return []; }, { navBarLocation: [{\n            type: Input\n        }], navBarLayout: [{\n            type: Input\n        }], navBarDirection: [{\n            type: Input\n        }], disableNavigationBar: [{\n            type: Input\n        }], defaultStepIndex: [{\n            type: Input\n        }], horizontalOrientation: [{\n            type: HostBinding,\n            args: ['class.horizontal']\n        }], verticalOrientation: [{\n            type: HostBinding,\n            args: ['class.vertical']\n        }], wizardStepsQueryList: [{\n            type: ContentChildren,\n            args: [WizardStep, { descendants: true }]\n        }] }); })();\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardNavigationBarComponent {\n    /**\n     * Constructor\n     *\n     * @param wizard The state the wizard currently resides in\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n    }\n    /**\n     * Returns all [[WizardStep]]s contained in the wizard\n     *\n     * @returns An array containing all [[WizardStep]]s\n     */\n    get wizardSteps() {\n        switch (this.wizard.navBarDirection) {\n            case 'right-to-left':\n                return this.wizard.wizardSteps.slice().reverse();\n            case 'left-to-right':\n            default:\n                return this.wizard.wizardSteps;\n        }\n    }\n    /**\n     * Returns the number of wizard steps, that need to be displaced in the navigation bar\n     *\n     * @returns The number of wizard steps to be displayed\n     */\n    get numberOfWizardSteps() {\n        return this.wizard.wizardSteps.length;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `current`\n     */\n    isCurrent(wizardStep) {\n        return wizardStep.selected;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `editing`\n     */\n    isEditing(wizardStep) {\n        return wizardStep.editing;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `done`\n     */\n    isDone(wizardStep) {\n        return wizardStep.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `optional`\n     */\n    isOptional(wizardStep) {\n        return wizardStep.optional;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n     *\n     * The `completed` class is only applied to completion steps.\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `completed`\n     */\n    isCompleted(wizardStep) {\n        return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n     * A wizard step can be navigated to if:\n     * - the step is currently not selected\n     * - the navigation bar isn't disabled\n     * - the navigation mode allows navigation to the step\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as navigable\n     */\n    isNavigable(wizardStep) {\n        return !wizardStep.selected && !this.wizard.disableNavigationBar &&\n            this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n    }\n}\nWizardNavigationBarComponent.ɵfac = function WizardNavigationBarComponent_Factory(t) { return new (t || WizardNavigationBarComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nWizardNavigationBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardNavigationBarComponent, selectors: [[\"aw-wizard-navigation-bar\"]], decls: 2, vars: 4, consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"awGoToStep\"], [1, \"label\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"step-indicator\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]], template: function WizardNavigationBarComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\");\n        ɵngcc0.ɵɵtemplate(1, WizardNavigationBarComponent_li_1_Template, 8, 17, \"li\", 0);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassMapInterpolate1(\"steps-indicator steps-\", ctx.numberOfWizardSteps, \"\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.wizardSteps);\n    } }, directives: function () { return [ɵngcc1.NgForOf, ɵngcc1.NgClass, GoToStepDirective, ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet]; }, encapsulation: 2 });\nWizardNavigationBarComponent.ctorParameters = () => [\n    { type: WizardComponent }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardNavigationBarComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard-navigation-bar',\n                template: \"<ul class=\\\"steps-indicator steps-{{numberOfWizardSteps}}\\\">\\n  <li [attr.id]=\\\"step.stepId\\\" *ngFor=\\\"let step of wizardSteps\\\" [ngClass]=\\\"{\\n        'current': isCurrent(step),\\n        'editing': isEditing(step),\\n        'done': isDone(step),\\n        'optional': isOptional(step),\\n        'completed': isCompleted(step),\\n        'navigable': isNavigable(step)\\n  }\\\">\\n    <a [awGoToStep]=\\\"step\\\">\\n      <div class=\\\"label\\\">\\n        <ng-container *ngIf=\\\"step.stepTitleTemplate\\\" [ngTemplateOutlet]=\\\"step.stepTitleTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepTitleTemplate\\\">{{step.stepTitle}}</ng-container>\\n      </div>\\n      <div class=\\\"step-indicator\\\"\\n        [ngStyle]=\\\"{ 'font-family': step.stepSymbolTemplate ? '' : step.navigationSymbol.fontFamily }\\\">\\n        <ng-container *ngIf=\\\"step.stepSymbolTemplate\\\" [ngTemplateOutlet]=\\\"step.stepSymbolTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepSymbolTemplate\\\">{{step.navigationSymbol.symbol}}</ng-container>\\n      </div>\\n    </a>\\n  </li>\\n</ul>\\n\"\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, null); })();\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepComponent extends WizardStep {\n}\nWizardStepComponent.ɵfac = /*@__PURE__*/ function () { let ɵWizardStepComponent_BaseFactory; return function WizardStepComponent_Factory(t) { return (ɵWizardStepComponent_BaseFactory || (ɵWizardStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepComponent)))(t || WizardStepComponent); }; }();\nWizardStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardStepComponent, selectors: [[\"aw-wizard-step\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function WizardStepComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard-step',\n                template: \"<ng-content></ng-content>\\n\",\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass EnableBackLinksDirective {\n    /**\n     * Constructor\n     *\n     * @param completionStep The wizard completion step, which should be exitable\n     */\n    constructor(completionStep) {\n        this.completionStep = completionStep;\n        /**\n         * This EventEmitter is called when the step is exited.\n         * The bound method can be used to do cleanup work.\n         */\n        this.stepExit = new EventEmitter();\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        this.completionStep.canExit = true;\n        this.completionStep.stepExit = this.stepExit;\n    }\n}\nEnableBackLinksDirective.ɵfac = function EnableBackLinksDirective_Factory(t) { return new (t || EnableBackLinksDirective)(ɵngcc0.ɵɵdirectiveInject(WizardCompletionStep, 1)); };\nEnableBackLinksDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: EnableBackLinksDirective, selectors: [[\"\", \"awEnableBackLinks\", \"\"]], outputs: { stepExit: \"stepExit\" } });\nEnableBackLinksDirective.ctorParameters = () => [\n    { type: WizardCompletionStep, decorators: [{ type: Host }] }\n];\nEnableBackLinksDirective.propDecorators = {\n    stepExit: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EnableBackLinksDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awEnableBackLinks]'\n            }]\n    }], function () { return [{ type: WizardCompletionStep, decorators: [{\n                type: Host\n            }] }]; }, { stepExit: [{\n            type: Output\n        }] }); })();\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nfunction isStepId(value) {\n    return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nfunction isStepIndex(value) {\n    return value.hasOwnProperty('stepIndex');\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nfunction isStepOffset(value) {\n    return value.hasOwnProperty('stepOffset');\n}\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass GoToStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The wizard component\n     * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n     */\n    constructor(wizard, wizardStep) {\n        this.wizard = wizard;\n        this.wizardStep = wizardStep;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    /**\n     * A convenience field for `preFinalize`\n     */\n    get finalize() {\n        return this.preFinalize;\n    }\n    /**\n     * A convenience name for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    set finalize(emitter) {\n        /* istanbul ignore next */\n        this.preFinalize = emitter;\n    }\n    /**\n     * Returns the destination step of this directive as an absolute step index inside the wizard\n     *\n     * @returns The index of the destination step\n     * @throws If `targetStep` is of an unknown type an `Error` is thrown\n     */\n    get destinationStep() {\n        let destinationStep;\n        if (isStepIndex(this.targetStep)) {\n            destinationStep = this.targetStep.stepIndex;\n        }\n        else if (isStepId(this.targetStep)) {\n            destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n        }\n        else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n            destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n        }\n        else if (this.targetStep instanceof WizardStep) {\n            destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n        }\n        else {\n            throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n        }\n        return destinationStep;\n    }\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     */\n    onClick() {\n        this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n    }\n}\nGoToStepDirective.ɵfac = function GoToStepDirective_Factory(t) { return new (t || GoToStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent), ɵngcc0.ɵɵdirectiveInject(WizardStep, 8)); };\nGoToStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: GoToStepDirective, selectors: [[\"\", \"awGoToStep\", \"\"]], hostBindings: function GoToStepDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function GoToStepDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, inputs: { targetStep: [\"awGoToStep\", \"targetStep\"] }, outputs: { preFinalize: \"preFinalize\", postFinalize: \"postFinalize\", finalize: \"finalize\" } });\nGoToStepDirective.ctorParameters = () => [\n    { type: WizardComponent },\n    { type: WizardStep, decorators: [{ type: Optional }] }\n];\nGoToStepDirective.propDecorators = {\n    preFinalize: [{ type: Output }],\n    postFinalize: [{ type: Output }],\n    targetStep: [{ type: Input, args: ['awGoToStep',] }],\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GoToStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awGoToStep]'\n            }]\n    }], function () { return [{ type: WizardComponent }, { type: WizardStep, decorators: [{\n                type: Optional\n            }] }]; }, { preFinalize: [{\n            type: Output\n        }], postFinalize: [{\n            type: Output\n        }], finalize: [{\n            type: Output\n        }], \n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }], targetStep: [{\n            type: Input,\n            args: ['awGoToStep']\n        }] }); })();\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass NextStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The state of the wizard\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    /**\n     * A convenience field for `preFinalize`\n     */\n    get finalize() {\n        return this.preFinalize;\n    }\n    /**\n     * A convenience name for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    set finalize(emitter) {\n        this.preFinalize = emitter;\n    }\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     */\n    onClick() {\n        this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n    }\n}\nNextStepDirective.ɵfac = function NextStepDirective_Factory(t) { return new (t || NextStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nNextStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NextStepDirective, selectors: [[\"\", \"awNextStep\", \"\"]], hostBindings: function NextStepDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NextStepDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, outputs: { preFinalize: \"preFinalize\", postFinalize: \"postFinalize\", finalize: \"finalize\" } });\nNextStepDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nNextStepDirective.propDecorators = {\n    preFinalize: [{ type: Output }],\n    postFinalize: [{ type: Output }],\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NextStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awNextStep]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { preFinalize: [{\n            type: Output\n        }], postFinalize: [{\n            type: Output\n        }], finalize: [{\n            type: Output\n        }], \n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass OptionalStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n     */\n    constructor(wizardStep) {\n        this.wizardStep = wizardStep;\n        // tslint:disable-next-line:no-input-rename\n        this.optional = true;\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n        this.wizardStep.optional = this.optional || this.optional === '';\n    }\n}\nOptionalStepDirective.ɵfac = function OptionalStepDirective_Factory(t) { return new (t || OptionalStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };\nOptionalStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OptionalStepDirective, selectors: [[\"\", \"awOptionalStep\", \"\"]], inputs: { optional: [\"awOptionalStep\", \"optional\"] } });\nOptionalStepDirective.ctorParameters = () => [\n    { type: WizardStep, decorators: [{ type: Host }] }\n];\nOptionalStepDirective.propDecorators = {\n    optional: [{ type: Input, args: ['awOptionalStep',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptionalStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awOptionalStep]'\n            }]\n    }], function () { return [{ type: WizardStep, decorators: [{\n                type: Host\n            }] }]; }, { optional: [{\n            type: Input,\n            args: ['awOptionalStep']\n        }] }); })();\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass PreviousStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The state of the wizard\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    /**\n     * A convenience field for `preFinalize`\n     */\n    get finalize() {\n        return this.preFinalize;\n    }\n    /**\n     * A convenience field for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    set finalize(emitter) {\n        /* istanbul ignore next */\n        this.preFinalize = emitter;\n    }\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     */\n    onClick() {\n        this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n    }\n}\nPreviousStepDirective.ɵfac = function PreviousStepDirective_Factory(t) { return new (t || PreviousStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nPreviousStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PreviousStepDirective, selectors: [[\"\", \"awPreviousStep\", \"\"]], hostBindings: function PreviousStepDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function PreviousStepDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, outputs: { preFinalize: \"preFinalize\", postFinalize: \"postFinalize\", finalize: \"finalize\" } });\nPreviousStepDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nPreviousStepDirective.propDecorators = {\n    preFinalize: [{ type: Output }],\n    postFinalize: [{ type: Output }],\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PreviousStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awPreviousStep]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { preFinalize: [{\n            type: Output\n        }], postFinalize: [{\n            type: Output\n        }], finalize: [{\n            type: Output\n        }], \n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass ResetWizardDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The wizard component\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n        /**\n         * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n         */\n        this.finalize = new EventEmitter();\n    }\n    /**\n     * Resets the wizard\n     */\n    onClick() {\n        // do some optional cleanup work\n        this.finalize.emit();\n        // reset the wizard to its initial state\n        this.wizard.reset();\n    }\n}\nResetWizardDirective.ɵfac = function ResetWizardDirective_Factory(t) { return new (t || ResetWizardDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nResetWizardDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ResetWizardDirective, selectors: [[\"\", \"awResetWizard\", \"\"]], hostBindings: function ResetWizardDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ResetWizardDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, outputs: { finalize: \"finalize\" } });\nResetWizardDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nResetWizardDirective.propDecorators = {\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResetWizardDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awResetWizard]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { finalize: [{\n            type: Output\n        }], \n    /**\n     * Resets the wizard\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass SelectedStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizardStep The wizard step, which should be selected by default\n     */\n    constructor(wizardStep) {\n        this.wizardStep = wizardStep;\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        this.wizardStep.defaultSelected = true;\n    }\n}\nSelectedStepDirective.ɵfac = function SelectedStepDirective_Factory(t) { return new (t || SelectedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };\nSelectedStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SelectedStepDirective, selectors: [[\"\", \"awSelectedStep\", \"\"]] });\nSelectedStepDirective.ctorParameters = () => [\n    { type: WizardStep, decorators: [{ type: Host }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectedStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awSelectedStep]'\n            }]\n    }], function () { return [{ type: WizardStep, decorators: [{\n                type: Host\n            }] }]; }, null); })();\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepDirective extends WizardCompletionStep {\n}\nWizardCompletionStepDirective.ɵfac = /*@__PURE__*/ function () { let ɵWizardCompletionStepDirective_BaseFactory; return function WizardCompletionStepDirective_Factory(t) { return (ɵWizardCompletionStepDirective_BaseFactory || (ɵWizardCompletionStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepDirective)))(t || WizardCompletionStepDirective); }; }();\nWizardCompletionStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardCompletionStepDirective, selectors: [[\"\", \"awWizardCompletionStep\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n            { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awWizardCompletionStep]',\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n                    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepDirective extends WizardStep {\n}\nWizardStepDirective.ɵfac = /*@__PURE__*/ function () { let ɵWizardStepDirective_BaseFactory; return function WizardStepDirective_Factory(t) { return (ɵWizardStepDirective_BaseFactory || (ɵWizardStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepDirective)))(t || WizardStepDirective); }; }();\nWizardStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStepDirective, selectors: [[\"\", \"awWizardStep\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awWizardStep]',\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\nclass NavigationModeDirective {\n    constructor(wizard) {\n        this.wizard = wizard;\n    }\n    ngOnChanges(changes) {\n        this.wizard.navigation = this.getNavigationMode();\n    }\n    getNavigationMode() {\n        if (this.awNavigationMode) {\n            return this.awNavigationMode;\n        }\n        return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n    }\n}\nNavigationModeDirective.ɵfac = function NavigationModeDirective_Factory(t) { return new (t || NavigationModeDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nNavigationModeDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NavigationModeDirective, selectors: [[\"\", \"awNavigationMode\", \"\"]], inputs: { awNavigationMode: \"awNavigationMode\", navigateBackward: \"navigateBackward\", navigateForward: \"navigateForward\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nNavigationModeDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nNavigationModeDirective.propDecorators = {\n    awNavigationMode: [{ type: Input }],\n    navigateBackward: [{ type: Input }],\n    navigateForward: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationModeDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awNavigationMode]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { awNavigationMode: [{\n            type: Input\n        }], navigateBackward: [{\n            type: Input\n        }], navigateForward: [{\n            type: Input\n        }] }); })();\n\n/**\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\n *\n * Initially completed steps are shown as completed when the wizard is presented to the user.\n *\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awCompletedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * An optional boolean condition can be specified:\n *\n * ```html\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\n *     ...\n * </aw-wizard-step>\n * ```\n */\nclass CompletedStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\n     */\n    constructor(wizardStep) {\n        this.wizardStep = wizardStep;\n        // tslint:disable-next-line:no-input-rename\n        this.initiallyCompleted = true;\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n        this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';\n    }\n}\nCompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) { return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };\nCompletedStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CompletedStepDirective, selectors: [[\"\", \"awCompletedStep\", \"\"]], inputs: { initiallyCompleted: [\"awCompletedStep\", \"initiallyCompleted\"] } });\nCompletedStepDirective.ctorParameters = () => [\n    { type: WizardStep, decorators: [{ type: Host }] }\n];\nCompletedStepDirective.propDecorators = {\n    initiallyCompleted: [{ type: Input, args: ['awCompletedStep',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awCompletedStep]'\n            }]\n    }], function () { return [{ type: WizardStep, decorators: [{\n                type: Host\n            }] }]; }, { initiallyCompleted: [{\n            type: Input,\n            args: ['awCompletedStep']\n        }] }); })();\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\nclass ArchwizardModule {\n    /* istanbul ignore next */\n    static forRoot() {\n        return {\n            ngModule: ArchwizardModule,\n            providers: [\n            // Nothing here yet\n            ]\n        };\n    }\n}\nArchwizardModule.ɵfac = function ArchwizardModule_Factory(t) { return new (t || ArchwizardModule)(); };\nArchwizardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ArchwizardModule });\nArchwizardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ArchwizardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    WizardComponent,\n                    WizardStepComponent,\n                    WizardNavigationBarComponent,\n                    WizardCompletionStepComponent,\n                    GoToStepDirective,\n                    NextStepDirective,\n                    PreviousStepDirective,\n                    OptionalStepDirective,\n                    WizardStepSymbolDirective,\n                    WizardStepTitleDirective,\n                    EnableBackLinksDirective,\n                    WizardStepDirective,\n                    WizardCompletionStepDirective,\n                    SelectedStepDirective,\n                    ResetWizardDirective,\n                    NavigationModeDirective,\n                    CompletedStepDirective,\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    WizardComponent,\n                    WizardStepComponent,\n                    WizardNavigationBarComponent,\n                    WizardCompletionStepComponent,\n                    GoToStepDirective,\n                    NextStepDirective,\n                    PreviousStepDirective,\n                    OptionalStepDirective,\n                    WizardStepSymbolDirective,\n                    WizardStepTitleDirective,\n                    EnableBackLinksDirective,\n                    WizardStepDirective,\n                    WizardCompletionStepDirective,\n                    SelectedStepDirective,\n                    ResetWizardDirective,\n                    NavigationModeDirective,\n                    CompletedStepDirective,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ArchwizardModule, { declarations: function () { return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]; } }); })();\n\n// export the components\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArchwizardModule, BaseNavigationMode, CompletedStepDirective, ConfigurableNavigationMode, EnableBackLinksDirective, GoToStepDirective, MovingDirection, NavigationModeDirective, NextStepDirective, OptionalStepDirective, PreviousStepDirective, ResetWizardDirective, SelectedStepDirective, WizardCompletionStep, WizardCompletionStepComponent, WizardCompletionStepDirective, WizardComponent, WizardNavigationBarComponent, WizardStep, WizardStepComponent, WizardStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, isStepId, isStepIndex, isStepOffset };\n\n","import { Component, OnInit } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ChartType } from 'ng-apexcharts';\n\n@Component({\n  selector: 'app-classe-enseigner',\n  templateUrl: './classe-enseigner.component.html',\n  styleUrls: ['./classe-enseigner.component.scss']\n})\nexport class ClasseEnseignerComponent implements OnInit {\n\n  breadCrumbItems: Array<{}>;\n  term: any;\n\n  transactions;\n  revenueBarChart: ChartType ;\n  statData = [\n    {\n      icon: 'bx bxs-cool',\n      title: 'Classes',\n      value: '5',\n\n    },\n    {\n      icon: 'bx bxs-wink-smile',\n      title: 'Eleves',\n      value: '300'\n    }\n\n  ];\n  constructor(private modalService: NgbModal) { }\n\n  ngOnInit() {\n    this.breadCrumbItems = [{ label: 'Contacts' }, { label: 'Profile', active: true }];\n   \n  }\n\n    /**\n   * Open modal\n   * @param content modal content\n   */\n    openModalAffecterClasse(content) {\n      this.modalService.open(content, {centered: true });\n    }\n\n}\n","\n<div class=\"container-fluid\">\n    <app-page-title title=\"Espace Professeur\" ></app-page-title>\n    <div class=\"row\">\n      <div class=\"col-xl-4\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"bg-soft bg-primary\">\n            <div class=\"row\">\n              <div class=\"col-7\">\n                <div class=\"text-black p-3\">\n                  <h5 class=\"text-black-50\">Bienvenue!</h5>\n                  <p>Espace Professeur</p>\n                </div>\n              </div>\n              <div class=\"col-5 align-self-end\">\n                <img src=\"assets/images/profile-img.png\" alt=\"\" class=\"img-fluid\">\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body pt-0\">\n            <div class=\"row\">\n              <div class=\"col-sm-4\">\n                <div class=\"avatar-md profile-user-wid mb-4\">\n                  <img src=\"assets/images/users/avatar-2.jpg\" alt=\"\" class=\"img-thumbnail rounded-circle\">\n                </div>\n                <h5 class=\"font-size-15 text-truncate\">Malick Ndoye</h5>\n                <p class=\"text-muted mb-0 text-truncate\">77 777 77 77</p>\n              </div>\n\n              <div class=\"col-sm-8\">\n                <div class=\"pt-4\">\n                  <div class=\"row\">\n                    <div class=\"col-6\">\n                      <h5 class=\"font-size-15\">5</h5>\n                      <p class=\"text-muted mb-0\">Classes</p>\n                    </div>\n                    <div class=\"col-6\">\n                      <h5 class=\"font-size-15\">300</h5>\n                      <p class=\"text-muted mb-0\">eleves</p>\n                    </div>\n                  </div>\n                  <!-- <div class=\"mt-4\">\n                    <a href=\"javascript: void(0);\" class=\"btn btn-success btn-sm\">En Cours </a>\n                  </div> -->\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- end card -->\n\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h4 class=\"card-title mb-4\"> Informations Personnelles</h4>\n\n            <div class=\"table-responsive\">\n              <table class=\"table table-nowrap mb-0\">\n                <tbody>\n                  <tr>\n                    <th scope=\"row\">Nom Complet:</th>\n                    <td>Malick Ndoye</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Mobile :</th>\n                    <td>(+221) 77 777 77 77</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Adresse :</th>\n                    <td> Parcelles</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Email</th>\n                    <td>malickndoye@gmail.com</td>\n                  </tr>\n                </tbody>\n                \n              </table>\n            </div>\n          </div>\n        </div>\n        <!-- end card -->\n\n        <!-- end card -->\n      </div>\n\n      <div class=\"col-xl-8\">\n\n        <div class=\"row\">\n          <div *ngFor=\"let stat of statData\" class=\"col-md-6 text-info\">\n            <app-stat [title]=\"stat.title\" [value]=\"stat.value\" [icon]=\"stat.icon\"></app-stat>\n          </div>\n        </div>\n        <!-- <div class=\"card\">\n          <div class=\"card-body\">\n            <h4 class=\"card-title mb-4\">Revenue</h4>\n            <apx-chart dir=\"ltr\" class=\"apex-charts\" [series]=\"revenueBarChart.series\" [chart]=\"revenueBarChart.chart\"\n              [xaxis]=\"revenueBarChart.xaxis\" [colors]=\"revenueBarChart.colors\" [yaxis]=\"revenueBarChart.yaxis\"\n              [dataLabels]=\"revenueBarChart.dataLabels\" [stroke]=\"revenueBarChart.stroke\"\n              [plotOptions]=\"revenueBarChart.plotOptions\" [fill]=\"revenueBarChart.fill\">\n            </apx-chart>\n          </div>\n        </div> -->\n\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <div class=\"row mb-2\">\n              <div class=\"col-sm-4\">\n                <div class=\"search-box me-2 mb-2 d-inline-block\">\n                  <div class=\"position-relative\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Search...\" [(ngModel)]=\"term\">\n                    <i class=\"bx bx-search-alt search-icon\"></i>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-sm-8\">\n                <div class=\"text-sm-end\">\n                    <button type=\"button\" class=\"btn btn-outline-success\" (click)=\"openModalAffecterClasse(content)\"><i\n                        class=\"fas fa-plus\"  ></i>&nbsp;Affecter Classe</button>\n                </div>\n              </div><!-- end col-->\n            </div>\n\n            <!-- Table data -->\n            <div class=\"table-responsive mb-0\">\n              <table class=\"table table-centered table-nowrap\">\n                <thead class=\"table-light\">\n                <tr>\n                  <th class=\"\">Id</th>\n                  <th class=\"\">Classe</th>\n                  <th class=\"\">Matiere</th>\n                  <th class=\"\"  style=\"text-align: center;\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                <td>1</td>\n                  <td>  CM1 </td>\n                  <td>SVT</td>\n                  <td style=\"text-align: center;\">\n                    <button type=\"button\" class=\"btn btn-warning\" ><i\n                      class=\"fas fa-edit\"  ></i></button>&nbsp;\n                      <button type=\"button\" class=\"btn btn-danger\" ><i\n                        class=\"fas fa-trash\"  ></i></button>&nbsp;\n                   </td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                      <td>  CM1 </td>\n                      <td>Histoire</td>\n                      <td style=\"text-align: center;\">\n                        <button type=\"button\" class=\"btn btn-warning\" ><i\n                          class=\"fas fa-edit\"  ></i></button>&nbsp;\n                          <button type=\"button\" class=\"btn btn-danger\" ><i\n                            class=\"fas fa-trash\"  ></i></button>&nbsp;\n                       </td>\n                    </tr>\n                </tbody>\n              </table>\n\n              <ng-template #content role=\"document\" let-modal>\n                <div class=\"modal-body\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title mt-0\">Affecter classe</h5>\n                    <button type=\"button\" class=\"btn-close\" aria-hidden=\"true\" (click)=\"modal.dismiss('Cross click')\"></button>\n                  </div>\n                    <form >\n                      <div class=\"row\">\n                        <div class=\"col-12\">\n                          <div class=\"mb-3\">\n                            <label class=\"control-label\" style=\"font-weight: bold;\">Classe</label>\n                            <select class=\"form-control\" placeholder=\"\" type=\"text\"   >\n                                <option>choisir classe...</option>\n                                <option>CM1</option>\n                                <option>CM2</option>\n                                <option>Terminale L</option>\n                            </select>\n                          </div>\n                          <div class=\"mb-3\">\n                            <label class=\"control-label\" style=\"font-weight: bold;\">Designation</label>\n                            <select class=\"form-control\" placeholder=\"\" type=\"text\"   >\n                                <option>choisir matiére...</option>\n                                <option>Histoire</option>\n                                <option>Allemand</option>\n                                <option>SVT/option>\n                            </select>\n                          </div>\n                          <div style=\"text-align: center;\">\n                      <button type=\"submit\" class=\"btn btn-success\" >Enregistrer\n                      </button>\n                      </div>\n                        \n                      </div>\n                      </div>\n                    </form>\n                  </div>\n                <!-- <div class=\"modal-footer\">\n                  <button class=\"btn btn-secondary\">Close</button>\n                </div> -->\n              </ng-template>\n            </div>\n            <ul class=\"pagination pagination-rounded justify-content-end mb-2\">\n              <li class=\"page-item disabled\">\n                <a class=\"page-link\" href=\"javascript: void(0);\" aria-label=\"Previous\">\n                  <i class=\"mdi mdi-chevron-left\"></i>\n                </a>\n              </li>\n              <li class=\"page-item active\">\n                <a class=\"page-link\" href=\"javascript: void(0);\">1</a>\n              </li>\n              <li class=\"page-item\">\n                <a class=\"page-link\" href=\"javascript: void(0);\">2</a>\n              </li>\n\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- end row -->\n  </div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProfesseurComponent } from './professeur/professeur.component';\nimport { ClasseEnseignerComponent } from './classe-enseigner/classe-enseigner.component';\n\nconst routes: Routes = [\n  {\n    path: 'professeur',\n    component:ProfesseurComponent\n  },\n  {\n    path: 'classeEnseigner',\n    component: ClasseEnseignerComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProfesseurRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProfesseurRoutingModule } from './professeur-routing.module';\nimport { ClasseEnseignerComponent } from './classe-enseigner/classe-enseigner.component';\nimport { ProfesseurComponent } from './professeur/professeur.component';\nimport { UIModule } from \"../../shared/ui/ui.module\";\nimport { WidgetModule } from \"../../shared/widget/widget.module\";\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbDatepickerModule, NgbNavModule, NgbPaginationModule, NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgApexchartsModule } from 'ng-apexcharts';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { Ng2SmartTableModule } from 'ng2-smart-table';\nimport { ArchwizardModule } from 'angular-archwizard';\n\n@NgModule({\n    declarations: [\n        ClasseEnseignerComponent,\n        ProfesseurComponent\n    ],\n    imports: [\n        CommonModule,\n        ProfesseurRoutingModule,\n        UIModule,\n        WidgetModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NgbPaginationModule,\n        NgApexchartsModule,\n        NgbTypeaheadModule,\n        NgbNavModule,\n        NgSelectModule,\n        NgbDatepickerModule,\n        Ng2SmartTableModule,\n        ArchwizardModule,\n    \n    ]\n})\nexport class ProfesseurModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { userGridData } from 'src/app/services/data';\nimport { Usergrid } from 'src/modeles/usergrid.model';\n\n@Component({\n  selector: 'app-professeur',\n  templateUrl: './professeur.component.html',\n  styleUrls: ['./professeur.component.scss']\n})\nexport class ProfesseurComponent implements OnInit {\n\n  userGridData: Usergrid[];\n  selected;\n  userForm: FormGroup;\n  submitted = false;\n  items: FormArray;\n  term:any;\n  // Select2 Dropdown\n  selectValue: string[];\n  constructor(private modalService : NgbModal, private formBuilder: FormBuilder) { }\n\n  ngOnInit() {\n    this.selectValue = ['Gerant  ,Distributeur'];\n\n    \n    this.userForm = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      email: ['', [Validators.required]],\n      designation: ['', [Validators.required]]\n    });\n    /**\n     * fetches data\n     */\n    this._fetchData();\n  }\n\n  get form() {\n    return this.userForm.controls;\n  }\n\n /**\n   * Open extra large modal\n   * @param exlargeModal extra large modal data\n   */\n extraLarge(exlargeModal: any) {\n  this.modalService.open(exlargeModal, { size: 'xl', centered: true });\n}\n\n  /**\n   * User grid data fetches\n   */\n  private _fetchData() {\n    this.userGridData = userGridData;\n  }\n\n  /**\n   * Save user\n   */\n  saveUser() {\n    if (this.userForm.valid) {\n      const name = this.userForm.get('name').value;\n      const email = this.userForm.get('email').value;\n      const designation = this.userForm.get('designation').value;\n       this.userGridData.push({\n         id: this.userGridData.length + 1,\n         name,\n         email,\n         designation,\n         projects: this.selected\n       })\n       this.modalService.dismissAll()\n    }\n    this.submitted = true\n  }\n\n\n}\n","\n\n<div class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div class=\"d-flex\">\n         <div class=\"col-sm-4\">\n              <div class=\"search-box me-2 mb-2 d-inline-block\">\n                <div class=\"position-relative\">\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Search...\" [(ngModel)]=\"term\" />\n                  <i class=\"bx bx-search-alt search-icon\"></i>\n                </div>\n              </div>\n            </div>\n        <button class=\"btn btn-success  btn-rounded  ms-auto mb-2\" (click)=\"extraLarge(content)\">\n          <i class=\"mdi mdi-plus me-1\"></i>Ajouter Professeur </button>\n      </div>\n\n      <ng-template #content role=\"document\" let-modal>\n        <aw-wizard [navBarLayout]=\"'large-empty-symbols'\">\n          <aw-wizard-step stepTitle=\"Ajout Professeur\">\n            <ng-template awWizardStepSymbol>1</ng-template>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"card card-body\">\n                  <div class=\"row mt-3\">\n                    <div class=\"col-12\">\n                      <div class=\"row mb-3\">\n                        <div class=\"col-md-4\">\n                          <input class=\"form-control\" type=\"text\" placeholder=\"Nom\">\n                        </div>\n                        <div class=\"col-md-4\">\n                          <input class=\"form-control\" type=\"text\" placeholder=\"Prénom\">\n                        </div>\n                        <div class=\"col-md-4\">\n                          <input class=\"form-control\" type=\"text\" placeholder=\"Adresse\">\n                        </div>\n                  \n                      </div>\n                      <div class=\"row mb-3\">\n                        <div class=\"col-md-4\">\n                          <input class=\"form-control\" type=\"number\" placeholder=\"Téléphone\">\n                        </div>\n                        <div class=\"col-md-4\">\n                          <input class=\"form-control\" type=\"email\" placeholder=\"Email\">\n                        </div>\n                        <div class=\"col-md-4\">\n                          <input class=\"form-control\" type=\"text\" placeholder=\"Login\">\n                        </div>\n                       \n                      </div>\n                    </div>\n                  </div>\n                  <br>\n                  <div style=\"text-align:center;\">\n                    <ul class=\"list-inline wizard mb-0\" style=\"text-align: center; display: inline-block;\">\n                      <li class=\"list-inline-item float-end\">\n                        <button class=\"btn btn-success\" awNextStep >Suivant&nbsp;<i class=\"fa fa-arrow-right\"></i></button>\n                      </li>\n                      <li class=\"list-inline-item float-end\">\n                        <button class=\"btn btn-light\" awNextStep style=\"color: black;\" disabled><i class=\"fa fa-arrow-left\"></i>&nbsp;Précédent</button>&nbsp;\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </aw-wizard-step>\n      \n          <aw-wizard-step stepTitle=\"Désignation classe\">\n            <ng-template awWizardStepSymbol>2</ng-template>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"card card-body\">\n                  <div class=\"row mt-3\">\n                    <div class=\"col-md-6\">\n                      <div class=\"col-sm-auto\">\n                        <select class=\"form-select\" id=\"autoSizingSelect\">\n                          <option selected>Classe enseignée</option>\n                          <option value=\"1\">CM1</option>\n                          <option value=\"2\">SVT</option>\n                        </select>\n                      </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <div class=\"col-sm-auto\">\n                        <select class=\"form-select\" id=\"autoSizingSelect\">\n                          <option selected>Matière</option>\n                          <option value=\"1\">Mathématiques</option>\n                          <option value=\"2\">Français</option>\n                          <option value=\"3\">Histoire-Géographie</option>\n                          <!-- autres options de matières ici -->\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                  <br>\n                  <div style=\"text-align:center;\">\n                    <ul class=\"list-inline wizard mb-0\" style=\"text-align: center; display: inline-block;\">\n                      <li class=\"list-inline-item float-end\">\n                        <button class=\"btn btn-success\" awNextStep >Suivant&nbsp;<i class=\"fa fa-arrow-right\"></i></button>\n                      </li>\n                      <li class=\"list-inline-item float-end\">\n                        <button class=\"btn btn-light\" awPreviousStep style=\"color: black;\"><i class=\"fa fa-arrow-left\"></i>&nbsp;Précédent</button>&nbsp;\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </aw-wizard-step>\n          \n          <aw-wizard-step stepTitle=\"Confirmation\">\n            <ng-template awWizardStepSymbol>3</ng-template>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"card card-body\">\n                  <div class=\"row mt-3\">\n                    <div class=\"col-md-12\">\n                      <!-- <p>Veuillez vérifier les informations suivantes avant de confirmer :</p>\n                      <ul>\n                        <li>Nom : <strong>{{nom}}</strong></li>\n                        <li>Prénom : <strong>{{prenom}}</strong></li>\n                        <li>Adresse : <strong>{{adresse}}</strong></li>\n                        <li>Téléphone : <strong>{{telephone}}</strong></li>\n                        <li>Email : <strong>{{email}}</strong></li>\n                        <li>Login : <strong>{{login}}</strong></li>\n                        <li>Matière : <strong>{{matiere}}</strong></li>\n                        <li>Classe enseignée : <strong>{{classe}}</strong></li>\n                      </ul> -->\n                      <ul style=\"text-align: center;\">\n                        <li>Nom : <strong>Mbaye</strong></li>\n                        <li>Prénom : <strong>Aida</strong></li>\n                        <li>Adresse : <strong>Patte doie</strong></li>\n                        <li>Téléphone : <strong>77888888</strong></li>\n                        <li>Email : <strong>aida@gmail.com</strong></li>\n                        <li>Login : <strong>aida</strong></li>\n                        <li>Matière : <strong>svt</strong></li>\n                        <li>Classe enseignée : <strong>CM1</strong></li>\n                      </ul>\n                    </div>\n                  </div>\n                  <br>\n                  <div style=\"text-align:center;\">\n                    <ul class=\"list-inline wizard mb-0\" style=\"text-align: center; display: inline-block;\">\n                      <li class=\"list-inline-item float-end\">\n                        <button class=\"btn btn-success\" awFinishWizard >Confirmer&nbsp;<i class=\"fa fa-save\"></i></button>\n                      </li>\n                      <li class=\"list-inline-item float-end\">\n                        <button class=\"btn btn-light\" awPreviousStep style=\"color: black;\"><i class=\"fa fa-arrow-left\"></i>&nbsp;Précédent</button>&nbsp;\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </aw-wizard-step>\n\n          </aw-wizard>\n          </ng-template>\n\n      <div class=\"col-xl-2 col-md-6\"   *ngFor=\"let data of userGridData\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <div class=\"favorite-icon\" >\n              <a href=\"javascript:void(0)\"><i class=\"uil uil-heart-alt fs-18\"></i></a>\n            </div>\n            <div class=\"avatar-sm mx-auto mb-4\" *ngIf=\"!data.image\"  >\n              <span class=\"avatar-title rounded-circle bg-soft bg-info text-primary font-size-16\" >\n                {{data.name.charAt(0)}}\n              </span>\n            </div>\n            <div *ngIf=\"data.image\" class=\"mb-4\">\n              <img class=\"rounded-circle avatar-sm\" src=\"{{data.image}}\" alt />\n            </div>\n            <h5 class=\"fs-17 mb-2\" style=\"text-align: center;\"><a href=\"job-details.html\" class=\"text-dark\">{{data.name}}</a> </h5>\n            <ul class=\"list-inline mb-0\" style=\"text-align: center;\">\n              <li class=\"list-inline-item\" >\n                <p class=\"text-muted fs-14 mb-1 \"><i class=\"mdi mdi-map-marker\"></i>Parcelles</p>\n              </li>\n              <li class=\"list-inline-item\">\n                <p class=\"text-muted fs-14 mb-0\">(+221) 77 777 77 77</p>\n              </li>\n              <li class=\"list-inline-item\">\n                <button type=\"button\" class=\"btn btn-white\">\n                  <i class=\"bx bx-edit text-warning my-custom-icon\" ></i> \n                </button>\n                <button type=\"button\" class=\"btn btn-white\">\n                  <i class=\"bx bx-trash text-danger my-custom-icon\" ></i> \n                </button>\n              </li>\n            </ul>\n            \n          <br>\n          <div class=\"card-footer bg-transparent border-top\" >\n           <button routerLink=\"/professeur/classeEnseigner\" href=\"javascript: void(0);\" data-bs-toggle=\"modal\" class=\"btn btn-outline-success \" ><i class=\"fa fa-eye\"></i>&nbsp; Details</button>\n            </div>\n</div>\n</div>\n</div>\n</div>\n\n\n <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"text-center my-3\">\n          <a href=\"javascript:void(0);\" class=\"text-success\"><i class=\"bx bx-hourglass bx-spin mr-2\"></i> Load more </a>\n        </div>\n      </div> \n    </div>\n\n \n\n"],"names":[],"sourceRoot":"webpack:///"}